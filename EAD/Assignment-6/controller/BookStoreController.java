package com.metacube.assignment.controller;

import java.util.List;

import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import com.metacube.assignment.dto.StatusCode;
import com.metacube.assignment.dto.Message;
import com.metacube.assignment.dto.Book;
import com.metacube.assignment.dto.UpdateBook;
import com.metacube.assignment.service.BookStoreService;

/**
 * This is controller class for book store. This class contain all rest methods
 * @author Surender
 */
@Path("/book")
public class BookStoreController {
	
	/**
	 * Helper Method
	 * @param statusCode is the code for status
	 * @param entity is the object to be returned
	 * @return Response
	 */
	private Response prepareResponse(int statusCode, Object entity) {
		return Response.status(statusCode).entity(entity).build();
	}
	
	/**
	 * Helper Method to validate input details
	 * @param book is the object of book
	 * @return true or false depending on validation
	 */
	private boolean isValidBook(Book book) {
		boolean flag = true;
		if(!book.getWriter().matches("[a-zA-Z]+")) {
			flag = false;
		}
		
		if(!book.getPublisher().matches("[a-zA-Z]+")) {
			flag = false;
		}
		
		if(! (book.getPublishedYear() > 0 )) {
			flag=false;
		}
		return flag;	
	}
	
	/**
	 * Helper Method to check if a book with given title already present
	 * @param title of book to be searched
	 * @return true if book is present else return false 
	 */
	private Boolean checkIfBookAlreadyPresent(String title) {
		BookStoreService bookStoreService = BookStoreService.getInstance();
		
		try {
			Book book = bookStoreService.getBookByTitle(title);
			
			if(book.getId() > 0 ) {
				return true;
				
			} else {
				return false;
			}
			
		} catch(Exception ex) {
			return false;
		}

		
	}
	
	/**
	 * This REST method find and return book for given title
	 * @param title is the title of book
	 * @return object of book as JSON
	 */
	@GET
	@Path("/get/{title}")
	@Produces(MediaType.APPLICATION_JSON)
	public Response getBookByTitle(@PathParam("title") String title){
		
		BookStoreService bookStoreService = BookStoreService.getInstance();
		String str;
		
		try {
			Book book = bookStoreService.getBookByTitle(title);
			
			if(book.getId() > 0 ) {
				return prepareResponse(StatusCode.success, book);
				
			} else {
				str = "No book present wwith given title";
				Message message = new Message();
				message.setMessage(str);
				return prepareResponse(StatusCode.success, message);
			}
			
		} catch (Exception e) {
			str = "Exception generated by ststem";
			Message message = new Message();
			message.setMessage(str);
			
			return prepareResponse(StatusCode.notFound, message);
		}
	}
	
	/**
	 * This REST method returns all books
	 * @return List of books as JSON
	 */
	@GET
	@Path("/getall")
	@Produces(MediaType.APPLICATION_JSON)
	public Response getAllBooks(){
		
		BookStoreService bookStoreService = BookStoreService.getInstance();
		String str;
		
		try {
			List<Book> books =  bookStoreService.getAllBooks();
			
			if(books.size() != 0) {
				return prepareResponse(StatusCode.success, books);
				
			} else {
				str = "No books are available";
				Message message = new Message();
				message.setMessage(str);
				return prepareResponse(StatusCode.notFound, message);
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			
			str = "Exception generated by the system";
			Message message = new Message();
			message.setMessage(str);
			return prepareResponse(StatusCode.systemError, message);
		}
	}
	
	/**
	 * This REST method add book
	 * @param book object of book which need to be added
	 * @return true if added else false
	 */
	@POST
	@Path("/add")
	@Produces(MediaType.APPLICATION_JSON)
	public Response addBook(Book book){
		
		BookStoreService bookStoreService = BookStoreService.getInstance();
		String str;
		
		try {
			String title = book.getTitle();
			
			if(isValidBook(book) && !checkIfBookAlreadyPresent(title)){
				
				if(bookStoreService.addBook(book)) {
					str = "data successfully inserted !!";
					
				} else {
					str = "data can't be inserted !!";
				}
				
				Message message = new Message();
				message.setMessage(str);
				return prepareResponse(StatusCode.success, message);
				
			} else {
				str = "Book already exist";
				Message message = new Message();
				message.setMessage(str);
				return prepareResponse(StatusCode.failure, message);
			}
			
		} catch (Exception e) {
			e.printStackTrace();

			str = "Exception thrown by the system";
			Message message = new Message();
			message.setMessage(str);
			return prepareResponse(StatusCode.systemError, message);
		}
	}
	
	/**
	 * This REST method delete book by id
	 * @param id id of book
	 * @return true if book deleted else false
	 */
	@DELETE
	@Path("/delete/{id}")
	@Produces(MediaType.APPLICATION_JSON)
	public Response deleteBookById(@PathParam("id") int id){
		
		BookStoreService bookStoreService = BookStoreService.getInstance();
		String str;
		
		try {
			
			if(id > 0) {
				
				if(bookStoreService.deleteBookById(id)) {
					str = "Book successfully deleted";
					
				} else {
					str = "Book deletion failed";
				}
				
				Message message = new Message();
				message.setMessage(str);
				return prepareResponse(StatusCode.success, message);
				
			} else {
				str = "No book availabe for this id";
				Message message = new Message();
				message.setMessage(str);
				return prepareResponse(StatusCode.notFound, message);
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			
			str = "Exception thrown by the system";
			Message message = new Message();
			message.setMessage(str);
			return prepareResponse(StatusCode.systemError, message);
		}
	}
	
	/**
	 * This REST method delete all books
	 * @return true if all books deleted else false
	 */
	@DELETE
	@Path("/deleteall")
	@Produces(MediaType.APPLICATION_JSON)
	public Response deleteAllBooks(){
		
		BookStoreService bookStoreService = BookStoreService.getInstance();
		String str;
		
		try {
			str = "All books deleted successfully";
			
			Message message = new Message();
			message.setMessage(str);
			bookStoreService.deleteAllBooks();
			return prepareResponse(StatusCode.notFound, message);
			
		} catch (Exception e) {
			e.printStackTrace();
			
			str = "Exception thrown by the system";
			Message message = new Message();
			message.setMessage(str);
			return prepareResponse(StatusCode.systemError, message);
		}
	}
	
	/**
	 * This REST method update book
	 * @param id id of book to be updated
	 * @param updateBook object of updateBook contain details to be updated
	 * @return true if book updated else false
	 */
	@PUT
	@Path("/update/{id}")
	@Produces(MediaType.APPLICATION_JSON)
	public Response updateBook(@PathParam("id") int id, UpdateBook updateBook){
		
		BookStoreService bookStoreService = BookStoreService.getInstance();
		updateBook.setId(id);
		String str;
		
		try {
			if(updateBook.getId() > 0 && updateBook.getPublisher().matches("[a-zA-Z ]+")){
				
				bookStoreService.updateBook(updateBook);
				str = "Update successful";
				
				Message message = new Message();
				message.setMessage(str);
				return prepareResponse(StatusCode.success, message);
				
			} else {
				return Response.status(400).build();
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			
			str = "Exception thrown by the system";
			Message message = new Message();
			message.setMessage(str);
			return prepareResponse(StatusCode.systemError, message);
		}
	}
}